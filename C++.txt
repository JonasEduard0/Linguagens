				C++
Mouse 2 em uma variável > Renomear | Renomeia uma var e substitui em todos seus usos.
Há o comentário de uma linha(//) ou o de várias linhas(/*...*/).


	Header file
O arquivo.h é onde ficam as declarações de funções e classes POO, onde com #include "arquivo.h", no código .cpp, podemos incluir esse código ao nosso.


	Tipos de variáveis
int	     | Número inteiro. Ocupa 4 bytes na memória RAM.
char 	     | Um único caractere, entre aspas simples ''. Ocupa 1 byte na memória RAM.
string	     | Texto, entre aspas duplas "".
bool 	     | Retorna 1 para true(verdadeiro) e 0 para false.
float/double | Números quebrados com casas decimais. Double armazena mais casas. 
void() 	     | Não possui tipo nem retornará valor algum.


	Operadores lógicos
!   | Retorna o contrario do verdadeiro. Se true, retorna false.
&&  | Todas afirmações têm que ser true para retornar true.
||  | Se um dos valores for true, todo código será considerado true.


	Estrutura do código

#include <...>	     		 
					 
int main(){		     		 | Função principal onde a maioria do código vai dentro.
    	setlocale(LC_ALL, "portuguese"); | Permite o uso de acentuações da língua portuguesa com o <locale.h
	using namespace std; 	 	 | Tira a necessidade de colocar 'std::' no código, mas pode conflitar em grandes projetos.
	...
system("PAUSE")return 0;}    	 	 | Retorna para o S.O., 0 indica que tudo está correto, sempre no fim do código.


	Includes
São diretivas de pré-processamento que incluem um código e novas funções, quase uma biblioteca.
Importantes: #include <iostream>, <locale.h> que permite o código: setlocale(LC_ALL, "portuguese");  <string> para tratamento de strings; <cmath> para operações matemáticas e <vector> que permite a criação de vetores dinâmicos.

| #include "funcoesmenu.h" | Quando entre "", exporta um código seu da mesma pasta do projeto, normalmente funções.


	C in e C out

| std::count <<"txt";
Printa o texto/código especificado. Sai uma informação. Sinal de menor <.

| int numero1; 					  //Cria a(s) variável.
  std::cout << "Digite o(s) número(s): "; 	  //Pede um número ao usuário.
  std::cin >> numero1; 			          //A variável recebe o valor com cin, sinal de maior >.
  std::cout << "Numero = " << numero1 << endl; |  //Printa "Numero = (var)".


	Variáveis e Constantes
Variáveis, constantes e tipos de variáveis são chamados de literais e se declaram com (), =, ou até {}.
Valores escalares são vetores, enumerações e etc, se declaram com {}.

Variáveis globais são aquelas declaradas antes de main(), e é acessível em qualquer função. Consomem mais.
Variáveis locais são criadas dentro de uma função, if ou laços, portanto só são acessíveis dentro desse bloco de código.
Variáveis estáticas têm escopo local mas com o modificador static string "varestatica" ela continua para além do bloco.

| int variável(10); const string constante = 'texto fixo' |
Variável possibilita a mudança de seu valor, constante possui valor fixo.


	Formatação

| int num{10}; std::string Texto{"Texto string"};
  std::printf("Valor de num = %d, valor de Texto = %s", num, Texto.c_str()); |

Substitui %d pela variavel int após a vírgula. Funciona com os tipos:
int -> %d, float -> %f, double -> %lf, char -> %c, string -> %s.

Observe q string é considerado classe, então, na sua referência no printf, deve colocar .c_str().


	Comandos importantes

| std::endl; | "\n"   | Quebra de linha. endl esvazia o buffer de saída quando chamado e tem desempenho pior.

| std::flush;	      | Se utilizado o "\n" ao invés do endl, é bom utilizá-lo para esvazia o buffer de saída.

| &var 		      | Endereço hexadecimal que a variável ocupa.

| sizeof(var) 	      | Tamanho que a variável ocupa.

| system("...");      | Chama o shell do Windows e digita o código de dentro. pause, dir, color, etc.

| system(“color XX”); | 
Altera cor de fundo e cor da letra. Ex.: console preto e letra verde: system("COLOR 0A");
Cores: 0 -> preto, 1->azul, 2 -> verde, 3 -> verde-água, 4 -> vermelho, 5 -> roxo, 6 -> amarelo, 7 -> branco, 
8 -> cinza, 9 -> azul-claro, A -> verde, B -> verde-água, C -> vermelho, D -> lilás, E -> amarelo, F -> branco.

| typedef tipodado apelido; |
Cria um apelido para um tipo de dado. Ex: typedef int inteiro.


	Incremento e decremento 

| int n1{10}, n2{20};
  n1 = n2++; |
n1 recebe o valor 20, após isso, n2 acrescenta(++) ou diminui(--) 1 no valor, virando 21 ou 19. Incremento/decremento pós-fixado.

| n1 = --n2; |
n2 acrescenta(++) ou diminui(--) 1 no valor, virando 21 ou 19, depois n1 recebe o valor novo de n2. Incremento/decremento pré-fixado.


	Estrutura condicional / Operador ternário / Seleção condicional

 if (nome == "Jonas"){	      | Estrutura condicional simples.
    cout<<"Meu nome";}        | Se a condição for true, o bloco é executado.	
 else if (nome == "Eduardo"){ | Estrutura condicional aninhada.
    cout<<"Sobrenome";}       | Ou se esta for true, será executada.
 else{                        | Estrutura condicional composta .
    cout<<"Não é meu nome";}  | Se nenhum anterior, este será executado.

| int n1 = 0;
  n1 > 5 ? cout << "n1 é maior q 5" : cout << "n1 é menor q 5"; |
 Condição(?)      Caso true               (:)Caso false

| int num;
  cout << "Escolha 1 ou 2: ";
  cin >> num;
  switch (num){
case 1 : cout << "Escolheu 1!";
	break;
case 2 : cout << "Escolheu 2!";
	break;
default: cout << "1 ou 2 não foram escolhidos.";
	break;} |
Switch Case é bom usar para números ou caracteres, defalt seria o else.


	Estruturas de repetição 
	         While

| contador = 0             
  while (contador < 10){ 
      std::cout << contador);
      contador ++;} |
Enquanto contador for < 10, o bloco é executado repetidamente até o contador = 10.

| int cont{ 11 };
  do{
     cout << cont << " ";
     ++cont;
} while (dw<10); |
Realiza o comando enquanto cont for < 10, mesmo que esteja fora da condição, executa ao menos uma vez.

		For e for each

| int soma = 0;
  for (int i = 1; i <= 10; i++){
	soma = soma + i;}
  cout << "A soma dos números de 1 a 10 é " << soma; |
Enquanto i for <= 10, realiza o código.

| int foreache[]{ 10,20,30,40,50 };	| Útil para arrays.
for (auto dez : foreache){		| auto=detecta o tipo. 
	cout << dez << "\n";}		| Variável local 'dez' recebe cada valor(:) de foreach e é printado.


	Funções

| int somaumnumero(int somado1, int somado2) {
      return somado1 + somado2;}
  int main(){
    int somado1 = 5, somado2 = 10;
    cout << "A soma da função é: " << somaumnumero(somado1, somado2);...} |
Funções servem para não escrever o mesmo código várias vezes, chamamos a função sempre q precisarmos.

| void vazio(){} | Uma função sem tipo.


	Ponteiro e Aritmética de ponteiros

| int apontado{ 4096 }; int* ptr = &apontado; |
Uma variável onde é armazenado o primeiro endereço de memória(&) de outra variável int. Como cada var tem 4 bytes, possui 4 &, mas o ponteiro armazena apenas um.

| void* ptrg; |
Ponteiro genérico se usa quando não há ainda um tipo para apontar.
Depois pode especificar o tipo por meio de cast(transformar valores): | *(char*)ptrg; |

| int vetpont[]{ 1,23,-78,900,234 }; 	   | Aritmética de pnt. é usado em vetores.
  int* pontvet = vetpont;	     	   | Cada valor int do vetor tem 4bytes, 4 endereços por valor.
  for (int i = 0; i < 5; i++){	     	   | Ponteiro pega o 1º endereço do 1º valor.
    cout << pontvet[i];} //ou *(vetpont+1) | Printa o valor da posição de i do vetor q ponteiro aponta.


	Referência

| int num{2000}; int &ref = num; |
É um alias(apelido) para variáveis existentes, apenas faz referência a outros, permitindo trocar valores.
Não possui endereço próprio pois não é variável, seu endereço é o mesmo do referenciado.


		Vetores
	Array
Array: Quando for apenas uma linha. Ex: | array[0] = 3 | 1 linha, posição 0 recebe 3.

| float notas[]{1,2,3,4,5}; | Pode iniciar passando só tamanho, passando só valores ou ambos.
  int i = 1;		    | Se inicia na posição 0. Como nota[] recebe 5 valores, vai de 0 à 4 posições.
  notas[2] = 10;	    | 
  notas[i + 2] = 9.8;  	    | 
  notas[4] = notas[0] - 2;  | 

	Matriz
Matriz: Possui 2 ou mais dimensões. Ex: | matriz[3][2]  | 3 linhas e 2 colunas.
| int matriz[5][5];
  for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
	  if (i < j) {
	      cout << " 1 ";}
	  else if (i == j) {
	      cout << " 0 ";}
	  else{
       	      cout << "-1 ";}}} |

	Vetor dinâmico
Com a diretiva <vector>, é possível criar arrays com tamanho alterável.

| vector<float>vetordinamico = {1,2,3};	| Cria uma array float e já atribui valores.
  vetordinamico.push_back(4);		| Adiciona o número 4 á array.



	Programação Orientada a Objeto(POO)
Ao contrário da Programação Estruturada, gira em torno de classes e não funções, baseado na análise bottom-up e não na top-down.

Classe: é o molde que serve de base para criar/instanciar objetos. Ex: receita ou planta de construção.
Objeto: é instanciado/criado a partir da classe. 		   Ex: bolo ou casa construída.
Atributos(Propriedades): são as variáveis que caracterizam um objeto.
Métodos(Funções): os comportamentos do objeto, como ele funciona.

| class classecasa{	      | Declara a classe.
  private:		      | Por padrão, já é private. Diz que só pode ser acessado no código da classe.
  	int numquarto;	      | Atributos.
	float tamanho;	      |
	bool btemsuite;	      |
  public:		      | Public: permite o código ser usado fora da classe.
	void mostratamanho(); | Métodos.
	int obternumquarto(); |
	bool temsuite();};    |

| classecasa casadepraia;			| 'classecasa' pode ser chamado agora de 'casadepraia'
  cout << "\n" << casadepraia.mostratamanho();  | Para acessar um membro de uma classe, utiliza '.'

| (*casadepraia).numquarto | Ponteiro que também pode ser escrito: casadepraia->Setnumquarto

Herança: transmissão de recursos de uma superclasse/classe base pra classe filha/subclasse.



	Struct(Estrutura)
Parecido com classes, mas por padrão as variáveis são public. É um modelo de criação de variáveis que não ocupa espaço na memória. Declara fora de main() e utiliza dentro.

| struct Data{
     int dia;
     int mes;
     int ano;};...
  Data agenda;
  agenda.dia = 22;
  agenda.mes = 07;
  agenda.ano = 2013;
  cout << "Dia: " << agenda.dia; |
